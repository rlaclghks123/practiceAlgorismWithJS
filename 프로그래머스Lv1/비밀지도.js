//  지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 "공백"(" ") 또는 "벽"("#") 두 종류로 이루어져 있다.
//  전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 "지도 1"과 "지도 2"라고 하자.
// 지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다.
// 지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다.
// "지도 1"과 "지도 2"는 각각 정수 배열로 암호화되어 있다.
// 암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1, 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다.

// 1. 지도1, 지도2를 n의 개수에 맞춰서 2진법으로 바꾼다. 개수가 맞지 않는다면 0으로 채워준다.
// 2. 지도의 정수를 순회하면서 하나라도 벽이면 벽으로, 아니면 공백으로 만들어준다.
// 3. 2에서 만든 값을 문자열로 바꾼 배열로 출력한다.

function solution(n, arr1, arr2) {
  const first = arr1.map((num) => num.toString(2).padStart(n, '0'));
  const second = arr2.map((num) => num.toString(2).padStart(n, '0'));

  const answer = first.map((nums, idx) => {
    return [...nums]
      .map((num, idx2) => {
        if (num === '1' || second[idx][idx2] === '1') return '#';
        return ' ';
      })
      .join('');
  });

  return answer;
}
